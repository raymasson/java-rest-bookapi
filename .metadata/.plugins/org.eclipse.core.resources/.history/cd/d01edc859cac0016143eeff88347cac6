package com.pluralsight.repositories;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.constraints.NotNull;

import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.pluralsight.models.BookModel;
import com.pluralsight.utils.AppUtils;

public class BookRepository {
	
	private MongoClient mongoClient;
	private String dbName;
	private String collectionName;
	private DBCollection booksCollection;
	  
	/*public List<BookModel> getAll(){
		List<BookModel> books = new ArrayList<BookModel>();
		
		BookModel book = new BookModel();
		book.setTitle("Les misérables");
		book.setAuthor("Victor Hugo");
		book.setGenre("Historical");
		book.setRead(true);
		
		BookModel book2 = new BookModel();
		book2.setTitle("Les misérables 2");
		book2.setAuthor("Victor Hugo 2");
		book2.setGenre("Historical 2");
		book2.setRead(false);
		
		books.add(book);
		books.add(book2);
		
		return books;
	}*/
	
	public void init() throws UnknownHostException {
		DB bookDatabase = mongoClient.getDB(dbName);
		booksCollection = bookDatabase.getCollection(collectionName);
	}

	public Optional<BookModel> create(@NotNull final BookModel book) {
		try {
			booksCollection.insert(AppUtils.toDBObject(book));
			return Optional.of(book);
		} catch (MongoException.DuplicateKey e) {
			return Optional.empty(); // book already exists
		}
	}

  public List<Book> readAll() {
    final List<Book> books = new ArrayList<>();

    try (DBCursor cursor = booksCollection.find()) {
      while (cursor.hasNext()) {
        DBObject dbObject = cursor.next();
        books.add((Book) AppUtils.fromDBObject(dbObject, Book.class));
      }
    }
    logger.info("Retrieved [{}] books", books.size());
    return books;
  }

  public Optional<Book> readByIsbn(@Nonnull final String isbn) {
    checkNotNull(isbn, "Argument[isbn] must not be null");

DBObject query = new BasicDBObject("isbn", isbn);
DBObject dbObject = booksCollection.findOne(query);

if (dbObject != null) {
  Book book = (Book) AppUtils.fromDBObject(dbObject, Book.class);
  logger.info("Retrieved book for isbn[{}]:{}", isbn, book);
  return Optional.of(book);
}
logger.info("Book with isbn[{}] does not exist", isbn);
    return Optional.empty();
  }

  public Optional<Book> update(@Nonnull final Book bookToUpdate) {
    checkNotNull(bookToUpdate, "Argument[bookToUpdate] must not be null");

DBObject query = new BasicDBObject("_id", bookToUpdate.getIsbn());
WriteResult result = booksCollection.update(
    query, AppUtils.toDBObject(bookToUpdate));

if (result.getN() == 1) {
  logger.info("Updated book with isbn[{}]", bookToUpdate.getIsbn());
  return Optional.of(bookToUpdate);
}
logger.info("Book with isbn[{}] does not exist");
return Optional.empty(); // book does not exist
}

public boolean delete(@Nonnull final Book bookToDelete) {
checkNotNull(bookToDelete, "Argument[bookToDelete] must not be null");

DBObject query = new BasicDBObject("_id", bookToDelete.getIsbn());
WriteResult result = booksCollection.remove(query);

if (result.getN() == 1) {
  logger.info("Deleted book with isbn[{}]", bookToDelete.getIsbn());
  return true;
}
logger.info("Book with isbn[{}] does not exist", bookToDelete.getIsbn());
    return false;
}
	
	public void setMongoClient(final MongoClient mongoClient) {
		this.mongoClient = mongoClient;
    }

	public void setDbName(final String dbName) {
		this.dbName = dbName;
	}

	public void setCollectionName(final String collectionName) {
		this.collectionName = collectionName;
	}
}
