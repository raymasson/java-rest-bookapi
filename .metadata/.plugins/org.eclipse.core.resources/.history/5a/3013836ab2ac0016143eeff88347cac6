package com.pluralsight.repositories;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.validation.constraints.NotNull;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.WriteResult;
import com.pluralsight.models.BookModel;
import com.pluralsight.utils.AppUtils;

public class BookRepository {
	
	private MongoClient mongoClient;
	private String dbName;
	private String collectionName;
	private DBCollection booksCollection;
	  
	/*public List<BookModel> getAll(){
		List<BookModel> books = new ArrayList<BookModel>();
		
		BookModel book = new BookModel();
		book.setTitle("Les misérables");
		book.setAuthor("Victor Hugo");
		book.setGenre("Historical");
		book.setRead(true);
		
		BookModel book2 = new BookModel();
		book2.setTitle("Les misérables 2");
		book2.setAuthor("Victor Hugo 2");
		book2.setGenre("Historical 2");
		book2.setRead(false);
		
		books.add(book);
		books.add(book2);
		
		return books;
	}*/
	
	public void init(MongoClient mongoClient, String dbName, String collectionName) throws UnknownHostException {
		this.mongoClient = mongoClient;
		this.dbName = dbName;
		this.collectionName = collectionName;
		DB bookDatabase = mongoClient.getDB(dbName);
		booksCollection = bookDatabase.getCollection(collectionName);
	}

	public Optional<BookModel> create(@NotNull final BookModel book) {
		try {
			booksCollection.insert(AppUtils.toDBObject(book));
			return Optional.of(book);
		} catch (MongoException.DuplicateKey e) {
			return Optional.empty(); // book already exists
		}
	}

	public List<BookModel> getAll() {
		final List<BookModel> books = new ArrayList<>();

		try (DBCursor cursor = booksCollection.find()) {
			while (cursor.hasNext()) {
				DBObject dbObject = cursor.next();
				BookModel book = (BookModel) AppUtils.fromDBObject(dbObject, BookModel.class);
				book.set_bookId(book.get_id());
				books.add(book);
			}
		}

		return books;
	}

	public Optional<BookModel> get(@NotNull final String id) {
		DBObject query = new BasicDBObject("_id", id);
		DBObject dbObject = booksCollection.findOne(query);

		if (dbObject != null) {
			BookModel book = (BookModel) AppUtils.fromDBObject(dbObject, BookModel.class);
			return Optional.of(book);
		}

		return Optional.empty();
	}

	public Optional<BookModel> update(@NotNull final BookModel bookToUpdate) {
		DBObject query = new BasicDBObject("_id", bookToUpdate.get_id());
		WriteResult result = booksCollection.update(query, AppUtils.toDBObject(bookToUpdate));

		if (result.getN() == 1) {
			return Optional.of(bookToUpdate);
		}

		return Optional.empty(); // book does not exist
	}

	public boolean delete(@NotNull final BookModel bookToDelete) {
		DBObject query = new BasicDBObject("_id", bookToDelete.get_id());
		WriteResult result = booksCollection.remove(query);

		if (result.getN() == 1) {
			return true;
		}

		return false;
	}
	
	public void setMongoClient(final MongoClient mongoClient) {
		this.mongoClient = mongoClient;
    }

	public void setDbName(final String dbName) {
		this.dbName = dbName;
	}

	public void setCollectionName(final String collectionName) {
		this.collectionName = collectionName;
	}
}
