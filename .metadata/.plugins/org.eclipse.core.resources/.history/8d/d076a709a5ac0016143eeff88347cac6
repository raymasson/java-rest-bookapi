package com.pluralsight;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import static javax.ws.rs.core.Response.Status.BAD_REQUEST;
import static javax.ws.rs.core.Response.Status.NOT_FOUND;
import static javax.ws.rs.core.Response.Status.NO_CONTENT;

import com.mongodb.MongoClient;
import com.pluralsight.models.BookModel;
import com.pluralsight.repositories.BookRepository;

@Path("books")
public class BookController {
	
	private BookRepository bookRepository = new BookRepository();
	
	public BookController () throws UnknownHostException{
		bookRepository.init(new MongoClient("localhost", 27017), "bookAPI", "books");
	}
	
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAll() {
    	List<BookModel> books = new ArrayList<>(bookRepository.getAll());
        
        return Response.ok(books).build();
    }
    
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("{bookId}")
    public BookModel get(@PathParam ("bookId") String bookId) {
    	Optional<BookModel> book = bookRepository.get(bookId);
        if (book.isPresent()) {
          return Response.ok(book).build();
        }
        
        return Response.status(NOT_FOUND).entity(format(BOOK_NOT_FOUND_MSG, isbn)).build();
    }
    
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public BookModel post(BookModel bookModel) {
    	return bookModel;
    }
    
    @PUT
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @Path("{bookId}")
    public BookModel put(@PathParam ("bookId") String bookId, BookModel bookModel) {
        return bookModel;
    }
    
    @DELETE
    @Produces(MediaType.TEXT_PLAIN)
    @Path("{bookId}")
    public String delete(@PathParam ("bookId") String bookId) {
        return "The book is removed!";
    }
}
